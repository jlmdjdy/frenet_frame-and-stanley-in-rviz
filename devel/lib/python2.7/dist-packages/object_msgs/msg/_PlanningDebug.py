# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from object_msgs/PlanningDebug.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import object_msgs.msg
import std_msgs.msg

class PlanningDebug(genpy.Message):
  _md5sum = "8ebf1e00ef837b4782bf667f543af084"
  _type = "object_msgs/PlanningDebug"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# time
float64 car2_t0
float64 car3_t0
float64 traj_t0

# position
float32 x0
float32 y0
float32 yaw0
float32 v0
float32 a0

# planned trajectories
object_msgs/Trajectory[] planned_trajectories
object_msgs/PolygonArray[] ego_polygons
float32[] costs
int32 best_ind
float32 best_cost

# predictions
object_msgs/DebugPrediction[] car2_predictions
object_msgs/DebugPrediction[] car3_predictions
object_msgs/Polygon[] car2_polygons
object_msgs/Polygon[] car3_polygons
================================================================================
MSG: object_msgs/Trajectory
std_msgs/Header header
int32 n
float32 dt
float32[] x
float32[] y
float32[] yaw
float32[] kappa
float32[] a
float32[] v
time t0  # time corresponding x[0]
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: object_msgs/PolygonArray
object_msgs/Polygon[] polygon_list
================================================================================
MSG: object_msgs/Polygon
int32 n
float32[] x
float32[] y
================================================================================
MSG: object_msgs/DebugPrediction
# prediction msg
float32[] x
float32[] y
float32[] yaw

float32[] sigx
float32[] sigy
float32[] rho"""
  __slots__ = ['car2_t0','car3_t0','traj_t0','x0','y0','yaw0','v0','a0','planned_trajectories','ego_polygons','costs','best_ind','best_cost','car2_predictions','car3_predictions','car2_polygons','car3_polygons']
  _slot_types = ['float64','float64','float64','float32','float32','float32','float32','float32','object_msgs/Trajectory[]','object_msgs/PolygonArray[]','float32[]','int32','float32','object_msgs/DebugPrediction[]','object_msgs/DebugPrediction[]','object_msgs/Polygon[]','object_msgs/Polygon[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       car2_t0,car3_t0,traj_t0,x0,y0,yaw0,v0,a0,planned_trajectories,ego_polygons,costs,best_ind,best_cost,car2_predictions,car3_predictions,car2_polygons,car3_polygons

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PlanningDebug, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.car2_t0 is None:
        self.car2_t0 = 0.
      if self.car3_t0 is None:
        self.car3_t0 = 0.
      if self.traj_t0 is None:
        self.traj_t0 = 0.
      if self.x0 is None:
        self.x0 = 0.
      if self.y0 is None:
        self.y0 = 0.
      if self.yaw0 is None:
        self.yaw0 = 0.
      if self.v0 is None:
        self.v0 = 0.
      if self.a0 is None:
        self.a0 = 0.
      if self.planned_trajectories is None:
        self.planned_trajectories = []
      if self.ego_polygons is None:
        self.ego_polygons = []
      if self.costs is None:
        self.costs = []
      if self.best_ind is None:
        self.best_ind = 0
      if self.best_cost is None:
        self.best_cost = 0.
      if self.car2_predictions is None:
        self.car2_predictions = []
      if self.car3_predictions is None:
        self.car3_predictions = []
      if self.car2_polygons is None:
        self.car2_polygons = []
      if self.car3_polygons is None:
        self.car3_polygons = []
    else:
      self.car2_t0 = 0.
      self.car3_t0 = 0.
      self.traj_t0 = 0.
      self.x0 = 0.
      self.y0 = 0.
      self.yaw0 = 0.
      self.v0 = 0.
      self.a0 = 0.
      self.planned_trajectories = []
      self.ego_polygons = []
      self.costs = []
      self.best_ind = 0
      self.best_cost = 0.
      self.car2_predictions = []
      self.car3_predictions = []
      self.car2_polygons = []
      self.car3_polygons = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3d5f().pack(_x.car2_t0, _x.car3_t0, _x.traj_t0, _x.x0, _x.y0, _x.yaw0, _x.v0, _x.a0))
      length = len(self.planned_trajectories)
      buff.write(_struct_I.pack(length))
      for val1 in self.planned_trajectories:
        _v1 = val1.header
        _x = _v1.seq
        buff.write(_get_struct_I().pack(_x))
        _v2 = _v1.stamp
        _x = _v2
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_if().pack(_x.n, _x.dt))
        length = len(val1.x)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.x))
        length = len(val1.y)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.y))
        length = len(val1.yaw)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.yaw))
        length = len(val1.kappa)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.kappa))
        length = len(val1.a)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.a))
        length = len(val1.v)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.v))
        _v3 = val1.t0
        _x = _v3
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
      length = len(self.ego_polygons)
      buff.write(_struct_I.pack(length))
      for val1 in self.ego_polygons:
        length = len(val1.polygon_list)
        buff.write(_struct_I.pack(length))
        for val2 in val1.polygon_list:
          _x = val2.n
          buff.write(_get_struct_i().pack(_x))
          length = len(val2.x)
          buff.write(_struct_I.pack(length))
          pattern = '<%sf'%length
          buff.write(struct.Struct(pattern).pack(*val2.x))
          length = len(val2.y)
          buff.write(_struct_I.pack(length))
          pattern = '<%sf'%length
          buff.write(struct.Struct(pattern).pack(*val2.y))
      length = len(self.costs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.costs))
      _x = self
      buff.write(_get_struct_if().pack(_x.best_ind, _x.best_cost))
      length = len(self.car2_predictions)
      buff.write(_struct_I.pack(length))
      for val1 in self.car2_predictions:
        length = len(val1.x)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.x))
        length = len(val1.y)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.y))
        length = len(val1.yaw)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.yaw))
        length = len(val1.sigx)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.sigx))
        length = len(val1.sigy)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.sigy))
        length = len(val1.rho)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.rho))
      length = len(self.car3_predictions)
      buff.write(_struct_I.pack(length))
      for val1 in self.car3_predictions:
        length = len(val1.x)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.x))
        length = len(val1.y)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.y))
        length = len(val1.yaw)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.yaw))
        length = len(val1.sigx)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.sigx))
        length = len(val1.sigy)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.sigy))
        length = len(val1.rho)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.rho))
      length = len(self.car2_polygons)
      buff.write(_struct_I.pack(length))
      for val1 in self.car2_polygons:
        _x = val1.n
        buff.write(_get_struct_i().pack(_x))
        length = len(val1.x)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.x))
        length = len(val1.y)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.y))
      length = len(self.car3_polygons)
      buff.write(_struct_I.pack(length))
      for val1 in self.car3_polygons:
        _x = val1.n
        buff.write(_get_struct_i().pack(_x))
        length = len(val1.x)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.x))
        length = len(val1.y)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.planned_trajectories is None:
        self.planned_trajectories = None
      if self.ego_polygons is None:
        self.ego_polygons = None
      if self.car2_predictions is None:
        self.car2_predictions = None
      if self.car3_predictions is None:
        self.car3_predictions = None
      if self.car2_polygons is None:
        self.car2_polygons = None
      if self.car3_polygons is None:
        self.car3_polygons = None
      end = 0
      _x = self
      start = end
      end += 44
      (_x.car2_t0, _x.car3_t0, _x.traj_t0, _x.x0, _x.y0, _x.yaw0, _x.v0, _x.a0,) = _get_struct_3d5f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.planned_trajectories = []
      for i in range(0, length):
        val1 = object_msgs.msg.Trajectory()
        _v4 = val1.header
        start = end
        end += 4
        (_v4.seq,) = _get_struct_I().unpack(str[start:end])
        _v5 = _v4.stamp
        _x = _v5
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v4.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v4.frame_id = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.n, _x.dt,) = _get_struct_if().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.x = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.y = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.yaw = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.kappa = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.a = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.v = s.unpack(str[start:end])
        _v6 = val1.t0
        _x = _v6
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        self.planned_trajectories.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ego_polygons = []
      for i in range(0, length):
        val1 = object_msgs.msg.PolygonArray()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.polygon_list = []
        for i in range(0, length):
          val2 = object_msgs.msg.Polygon()
          start = end
          end += 4
          (val2.n,) = _get_struct_i().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sf'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val2.x = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sf'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val2.y = s.unpack(str[start:end])
          val1.polygon_list.append(val2)
        self.ego_polygons.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.costs = s.unpack(str[start:end])
      _x = self
      start = end
      end += 8
      (_x.best_ind, _x.best_cost,) = _get_struct_if().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.car2_predictions = []
      for i in range(0, length):
        val1 = object_msgs.msg.DebugPrediction()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.x = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.y = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.yaw = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.sigx = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.sigy = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.rho = s.unpack(str[start:end])
        self.car2_predictions.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.car3_predictions = []
      for i in range(0, length):
        val1 = object_msgs.msg.DebugPrediction()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.x = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.y = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.yaw = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.sigx = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.sigy = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.rho = s.unpack(str[start:end])
        self.car3_predictions.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.car2_polygons = []
      for i in range(0, length):
        val1 = object_msgs.msg.Polygon()
        start = end
        end += 4
        (val1.n,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.x = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.y = s.unpack(str[start:end])
        self.car2_polygons.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.car3_polygons = []
      for i in range(0, length):
        val1 = object_msgs.msg.Polygon()
        start = end
        end += 4
        (val1.n,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.x = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.y = s.unpack(str[start:end])
        self.car3_polygons.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3d5f().pack(_x.car2_t0, _x.car3_t0, _x.traj_t0, _x.x0, _x.y0, _x.yaw0, _x.v0, _x.a0))
      length = len(self.planned_trajectories)
      buff.write(_struct_I.pack(length))
      for val1 in self.planned_trajectories:
        _v7 = val1.header
        _x = _v7.seq
        buff.write(_get_struct_I().pack(_x))
        _v8 = _v7.stamp
        _x = _v8
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v7.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_if().pack(_x.n, _x.dt))
        length = len(val1.x)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.x.tostring())
        length = len(val1.y)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.y.tostring())
        length = len(val1.yaw)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.yaw.tostring())
        length = len(val1.kappa)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.kappa.tostring())
        length = len(val1.a)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.a.tostring())
        length = len(val1.v)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.v.tostring())
        _v9 = val1.t0
        _x = _v9
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
      length = len(self.ego_polygons)
      buff.write(_struct_I.pack(length))
      for val1 in self.ego_polygons:
        length = len(val1.polygon_list)
        buff.write(_struct_I.pack(length))
        for val2 in val1.polygon_list:
          _x = val2.n
          buff.write(_get_struct_i().pack(_x))
          length = len(val2.x)
          buff.write(_struct_I.pack(length))
          pattern = '<%sf'%length
          buff.write(val2.x.tostring())
          length = len(val2.y)
          buff.write(_struct_I.pack(length))
          pattern = '<%sf'%length
          buff.write(val2.y.tostring())
      length = len(self.costs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.costs.tostring())
      _x = self
      buff.write(_get_struct_if().pack(_x.best_ind, _x.best_cost))
      length = len(self.car2_predictions)
      buff.write(_struct_I.pack(length))
      for val1 in self.car2_predictions:
        length = len(val1.x)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.x.tostring())
        length = len(val1.y)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.y.tostring())
        length = len(val1.yaw)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.yaw.tostring())
        length = len(val1.sigx)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.sigx.tostring())
        length = len(val1.sigy)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.sigy.tostring())
        length = len(val1.rho)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.rho.tostring())
      length = len(self.car3_predictions)
      buff.write(_struct_I.pack(length))
      for val1 in self.car3_predictions:
        length = len(val1.x)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.x.tostring())
        length = len(val1.y)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.y.tostring())
        length = len(val1.yaw)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.yaw.tostring())
        length = len(val1.sigx)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.sigx.tostring())
        length = len(val1.sigy)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.sigy.tostring())
        length = len(val1.rho)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.rho.tostring())
      length = len(self.car2_polygons)
      buff.write(_struct_I.pack(length))
      for val1 in self.car2_polygons:
        _x = val1.n
        buff.write(_get_struct_i().pack(_x))
        length = len(val1.x)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.x.tostring())
        length = len(val1.y)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.y.tostring())
      length = len(self.car3_polygons)
      buff.write(_struct_I.pack(length))
      for val1 in self.car3_polygons:
        _x = val1.n
        buff.write(_get_struct_i().pack(_x))
        length = len(val1.x)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.x.tostring())
        length = len(val1.y)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.y.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.planned_trajectories is None:
        self.planned_trajectories = None
      if self.ego_polygons is None:
        self.ego_polygons = None
      if self.car2_predictions is None:
        self.car2_predictions = None
      if self.car3_predictions is None:
        self.car3_predictions = None
      if self.car2_polygons is None:
        self.car2_polygons = None
      if self.car3_polygons is None:
        self.car3_polygons = None
      end = 0
      _x = self
      start = end
      end += 44
      (_x.car2_t0, _x.car3_t0, _x.traj_t0, _x.x0, _x.y0, _x.yaw0, _x.v0, _x.a0,) = _get_struct_3d5f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.planned_trajectories = []
      for i in range(0, length):
        val1 = object_msgs.msg.Trajectory()
        _v10 = val1.header
        start = end
        end += 4
        (_v10.seq,) = _get_struct_I().unpack(str[start:end])
        _v11 = _v10.stamp
        _x = _v11
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v10.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v10.frame_id = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.n, _x.dt,) = _get_struct_if().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.x = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.y = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.yaw = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.kappa = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.a = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.v = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        _v12 = val1.t0
        _x = _v12
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        self.planned_trajectories.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ego_polygons = []
      for i in range(0, length):
        val1 = object_msgs.msg.PolygonArray()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.polygon_list = []
        for i in range(0, length):
          val2 = object_msgs.msg.Polygon()
          start = end
          end += 4
          (val2.n,) = _get_struct_i().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sf'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val2.x = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sf'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val2.y = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
          val1.polygon_list.append(val2)
        self.ego_polygons.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.costs = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 8
      (_x.best_ind, _x.best_cost,) = _get_struct_if().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.car2_predictions = []
      for i in range(0, length):
        val1 = object_msgs.msg.DebugPrediction()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.x = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.y = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.yaw = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.sigx = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.sigy = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.rho = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        self.car2_predictions.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.car3_predictions = []
      for i in range(0, length):
        val1 = object_msgs.msg.DebugPrediction()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.x = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.y = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.yaw = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.sigx = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.sigy = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.rho = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        self.car3_predictions.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.car2_polygons = []
      for i in range(0, length):
        val1 = object_msgs.msg.Polygon()
        start = end
        end += 4
        (val1.n,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.x = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.y = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        self.car2_polygons.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.car3_polygons = []
      for i in range(0, length):
        val1 = object_msgs.msg.Polygon()
        start = end
        end += 4
        (val1.n,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.x = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.y = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        self.car3_polygons.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3d5f = None
def _get_struct_3d5f():
    global _struct_3d5f
    if _struct_3d5f is None:
        _struct_3d5f = struct.Struct("<3d5f")
    return _struct_3d5f
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_if = None
def _get_struct_if():
    global _struct_if
    if _struct_if is None:
        _struct_if = struct.Struct("<if")
    return _struct_if
