// Generated by gencpp from file object_msgs/PlanningDebug.msg
// DO NOT EDIT!


#ifndef OBJECT_MSGS_MESSAGE_PLANNINGDEBUG_H
#define OBJECT_MSGS_MESSAGE_PLANNINGDEBUG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <object_msgs/Trajectory.h>
#include <object_msgs/PolygonArray.h>
#include <object_msgs/DebugPrediction.h>
#include <object_msgs/DebugPrediction.h>
#include <object_msgs/Polygon.h>
#include <object_msgs/Polygon.h>

namespace object_msgs
{
template <class ContainerAllocator>
struct PlanningDebug_
{
  typedef PlanningDebug_<ContainerAllocator> Type;

  PlanningDebug_()
    : car2_t0(0.0)
    , car3_t0(0.0)
    , traj_t0(0.0)
    , x0(0.0)
    , y0(0.0)
    , yaw0(0.0)
    , v0(0.0)
    , a0(0.0)
    , planned_trajectories()
    , ego_polygons()
    , costs()
    , best_ind(0)
    , best_cost(0.0)
    , car2_predictions()
    , car3_predictions()
    , car2_polygons()
    , car3_polygons()  {
    }
  PlanningDebug_(const ContainerAllocator& _alloc)
    : car2_t0(0.0)
    , car3_t0(0.0)
    , traj_t0(0.0)
    , x0(0.0)
    , y0(0.0)
    , yaw0(0.0)
    , v0(0.0)
    , a0(0.0)
    , planned_trajectories(_alloc)
    , ego_polygons(_alloc)
    , costs(_alloc)
    , best_ind(0)
    , best_cost(0.0)
    , car2_predictions(_alloc)
    , car3_predictions(_alloc)
    , car2_polygons(_alloc)
    , car3_polygons(_alloc)  {
  (void)_alloc;
    }



   typedef double _car2_t0_type;
  _car2_t0_type car2_t0;

   typedef double _car3_t0_type;
  _car3_t0_type car3_t0;

   typedef double _traj_t0_type;
  _traj_t0_type traj_t0;

   typedef float _x0_type;
  _x0_type x0;

   typedef float _y0_type;
  _y0_type y0;

   typedef float _yaw0_type;
  _yaw0_type yaw0;

   typedef float _v0_type;
  _v0_type v0;

   typedef float _a0_type;
  _a0_type a0;

   typedef std::vector< ::object_msgs::Trajectory_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::object_msgs::Trajectory_<ContainerAllocator> >::other >  _planned_trajectories_type;
  _planned_trajectories_type planned_trajectories;

   typedef std::vector< ::object_msgs::PolygonArray_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::object_msgs::PolygonArray_<ContainerAllocator> >::other >  _ego_polygons_type;
  _ego_polygons_type ego_polygons;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _costs_type;
  _costs_type costs;

   typedef int32_t _best_ind_type;
  _best_ind_type best_ind;

   typedef float _best_cost_type;
  _best_cost_type best_cost;

   typedef std::vector< ::object_msgs::DebugPrediction_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::object_msgs::DebugPrediction_<ContainerAllocator> >::other >  _car2_predictions_type;
  _car2_predictions_type car2_predictions;

   typedef std::vector< ::object_msgs::DebugPrediction_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::object_msgs::DebugPrediction_<ContainerAllocator> >::other >  _car3_predictions_type;
  _car3_predictions_type car3_predictions;

   typedef std::vector< ::object_msgs::Polygon_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::object_msgs::Polygon_<ContainerAllocator> >::other >  _car2_polygons_type;
  _car2_polygons_type car2_polygons;

   typedef std::vector< ::object_msgs::Polygon_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::object_msgs::Polygon_<ContainerAllocator> >::other >  _car3_polygons_type;
  _car3_polygons_type car3_polygons;





  typedef boost::shared_ptr< ::object_msgs::PlanningDebug_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::object_msgs::PlanningDebug_<ContainerAllocator> const> ConstPtr;

}; // struct PlanningDebug_

typedef ::object_msgs::PlanningDebug_<std::allocator<void> > PlanningDebug;

typedef boost::shared_ptr< ::object_msgs::PlanningDebug > PlanningDebugPtr;
typedef boost::shared_ptr< ::object_msgs::PlanningDebug const> PlanningDebugConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::object_msgs::PlanningDebug_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::object_msgs::PlanningDebug_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace object_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'object_msgs': ['/home/jdy/project_ws/src/custom_msgs/object_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::object_msgs::PlanningDebug_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::object_msgs::PlanningDebug_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::object_msgs::PlanningDebug_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::object_msgs::PlanningDebug_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::object_msgs::PlanningDebug_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::object_msgs::PlanningDebug_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::object_msgs::PlanningDebug_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8ebf1e00ef837b4782bf667f543af084";
  }

  static const char* value(const ::object_msgs::PlanningDebug_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8ebf1e00ef837b47ULL;
  static const uint64_t static_value2 = 0x82bf667f543af084ULL;
};

template<class ContainerAllocator>
struct DataType< ::object_msgs::PlanningDebug_<ContainerAllocator> >
{
  static const char* value()
  {
    return "object_msgs/PlanningDebug";
  }

  static const char* value(const ::object_msgs::PlanningDebug_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::object_msgs::PlanningDebug_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# time\n\
float64 car2_t0\n\
float64 car3_t0\n\
float64 traj_t0\n\
\n\
# position\n\
float32 x0\n\
float32 y0\n\
float32 yaw0\n\
float32 v0\n\
float32 a0\n\
\n\
# planned trajectories\n\
object_msgs/Trajectory[] planned_trajectories\n\
object_msgs/PolygonArray[] ego_polygons\n\
float32[] costs\n\
int32 best_ind\n\
float32 best_cost\n\
\n\
# predictions\n\
object_msgs/DebugPrediction[] car2_predictions\n\
object_msgs/DebugPrediction[] car3_predictions\n\
object_msgs/Polygon[] car2_polygons\n\
object_msgs/Polygon[] car3_polygons\n\
================================================================================\n\
MSG: object_msgs/Trajectory\n\
std_msgs/Header header\n\
int32 n\n\
float32 dt\n\
float32[] x\n\
float32[] y\n\
float32[] yaw\n\
float32[] kappa\n\
float32[] a\n\
float32[] v\n\
time t0  # time corresponding x[0]\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: object_msgs/PolygonArray\n\
object_msgs/Polygon[] polygon_list\n\
================================================================================\n\
MSG: object_msgs/Polygon\n\
int32 n\n\
float32[] x\n\
float32[] y\n\
================================================================================\n\
MSG: object_msgs/DebugPrediction\n\
# prediction msg\n\
float32[] x\n\
float32[] y\n\
float32[] yaw\n\
\n\
float32[] sigx\n\
float32[] sigy\n\
float32[] rho\n\
";
  }

  static const char* value(const ::object_msgs::PlanningDebug_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::object_msgs::PlanningDebug_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.car2_t0);
      stream.next(m.car3_t0);
      stream.next(m.traj_t0);
      stream.next(m.x0);
      stream.next(m.y0);
      stream.next(m.yaw0);
      stream.next(m.v0);
      stream.next(m.a0);
      stream.next(m.planned_trajectories);
      stream.next(m.ego_polygons);
      stream.next(m.costs);
      stream.next(m.best_ind);
      stream.next(m.best_cost);
      stream.next(m.car2_predictions);
      stream.next(m.car3_predictions);
      stream.next(m.car2_polygons);
      stream.next(m.car3_polygons);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PlanningDebug_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::object_msgs::PlanningDebug_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::object_msgs::PlanningDebug_<ContainerAllocator>& v)
  {
    s << indent << "car2_t0: ";
    Printer<double>::stream(s, indent + "  ", v.car2_t0);
    s << indent << "car3_t0: ";
    Printer<double>::stream(s, indent + "  ", v.car3_t0);
    s << indent << "traj_t0: ";
    Printer<double>::stream(s, indent + "  ", v.traj_t0);
    s << indent << "x0: ";
    Printer<float>::stream(s, indent + "  ", v.x0);
    s << indent << "y0: ";
    Printer<float>::stream(s, indent + "  ", v.y0);
    s << indent << "yaw0: ";
    Printer<float>::stream(s, indent + "  ", v.yaw0);
    s << indent << "v0: ";
    Printer<float>::stream(s, indent + "  ", v.v0);
    s << indent << "a0: ";
    Printer<float>::stream(s, indent + "  ", v.a0);
    s << indent << "planned_trajectories[]" << std::endl;
    for (size_t i = 0; i < v.planned_trajectories.size(); ++i)
    {
      s << indent << "  planned_trajectories[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::object_msgs::Trajectory_<ContainerAllocator> >::stream(s, indent + "    ", v.planned_trajectories[i]);
    }
    s << indent << "ego_polygons[]" << std::endl;
    for (size_t i = 0; i < v.ego_polygons.size(); ++i)
    {
      s << indent << "  ego_polygons[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::object_msgs::PolygonArray_<ContainerAllocator> >::stream(s, indent + "    ", v.ego_polygons[i]);
    }
    s << indent << "costs[]" << std::endl;
    for (size_t i = 0; i < v.costs.size(); ++i)
    {
      s << indent << "  costs[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.costs[i]);
    }
    s << indent << "best_ind: ";
    Printer<int32_t>::stream(s, indent + "  ", v.best_ind);
    s << indent << "best_cost: ";
    Printer<float>::stream(s, indent + "  ", v.best_cost);
    s << indent << "car2_predictions[]" << std::endl;
    for (size_t i = 0; i < v.car2_predictions.size(); ++i)
    {
      s << indent << "  car2_predictions[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::object_msgs::DebugPrediction_<ContainerAllocator> >::stream(s, indent + "    ", v.car2_predictions[i]);
    }
    s << indent << "car3_predictions[]" << std::endl;
    for (size_t i = 0; i < v.car3_predictions.size(); ++i)
    {
      s << indent << "  car3_predictions[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::object_msgs::DebugPrediction_<ContainerAllocator> >::stream(s, indent + "    ", v.car3_predictions[i]);
    }
    s << indent << "car2_polygons[]" << std::endl;
    for (size_t i = 0; i < v.car2_polygons.size(); ++i)
    {
      s << indent << "  car2_polygons[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::object_msgs::Polygon_<ContainerAllocator> >::stream(s, indent + "    ", v.car2_polygons[i]);
    }
    s << indent << "car3_polygons[]" << std::endl;
    for (size_t i = 0; i < v.car3_polygons.size(); ++i)
    {
      s << indent << "  car3_polygons[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::object_msgs::Polygon_<ContainerAllocator> >::stream(s, indent + "    ", v.car3_polygons[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // OBJECT_MSGS_MESSAGE_PLANNINGDEBUG_H
