// Generated by gencpp from file object_msgs/DebugPrediction.msg
// DO NOT EDIT!


#ifndef OBJECT_MSGS_MESSAGE_DEBUGPREDICTION_H
#define OBJECT_MSGS_MESSAGE_DEBUGPREDICTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace object_msgs
{
template <class ContainerAllocator>
struct DebugPrediction_
{
  typedef DebugPrediction_<ContainerAllocator> Type;

  DebugPrediction_()
    : x()
    , y()
    , yaw()
    , sigx()
    , sigy()
    , rho()  {
    }
  DebugPrediction_(const ContainerAllocator& _alloc)
    : x(_alloc)
    , y(_alloc)
    , yaw(_alloc)
    , sigx(_alloc)
    , sigy(_alloc)
    , rho(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _x_type;
  _x_type x;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _y_type;
  _y_type y;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _yaw_type;
  _yaw_type yaw;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _sigx_type;
  _sigx_type sigx;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _sigy_type;
  _sigy_type sigy;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _rho_type;
  _rho_type rho;





  typedef boost::shared_ptr< ::object_msgs::DebugPrediction_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::object_msgs::DebugPrediction_<ContainerAllocator> const> ConstPtr;

}; // struct DebugPrediction_

typedef ::object_msgs::DebugPrediction_<std::allocator<void> > DebugPrediction;

typedef boost::shared_ptr< ::object_msgs::DebugPrediction > DebugPredictionPtr;
typedef boost::shared_ptr< ::object_msgs::DebugPrediction const> DebugPredictionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::object_msgs::DebugPrediction_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::object_msgs::DebugPrediction_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace object_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'object_msgs': ['/home/jdy/project_ws/src/custom_msgs/object_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::object_msgs::DebugPrediction_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::object_msgs::DebugPrediction_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::object_msgs::DebugPrediction_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::object_msgs::DebugPrediction_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::object_msgs::DebugPrediction_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::object_msgs::DebugPrediction_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::object_msgs::DebugPrediction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "06e409df60e4d834580496938433d0da";
  }

  static const char* value(const ::object_msgs::DebugPrediction_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x06e409df60e4d834ULL;
  static const uint64_t static_value2 = 0x580496938433d0daULL;
};

template<class ContainerAllocator>
struct DataType< ::object_msgs::DebugPrediction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "object_msgs/DebugPrediction";
  }

  static const char* value(const ::object_msgs::DebugPrediction_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::object_msgs::DebugPrediction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# prediction msg\n\
float32[] x\n\
float32[] y\n\
float32[] yaw\n\
\n\
float32[] sigx\n\
float32[] sigy\n\
float32[] rho\n\
";
  }

  static const char* value(const ::object_msgs::DebugPrediction_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::object_msgs::DebugPrediction_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.yaw);
      stream.next(m.sigx);
      stream.next(m.sigy);
      stream.next(m.rho);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DebugPrediction_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::object_msgs::DebugPrediction_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::object_msgs::DebugPrediction_<ContainerAllocator>& v)
  {
    s << indent << "x[]" << std::endl;
    for (size_t i = 0; i < v.x.size(); ++i)
    {
      s << indent << "  x[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.x[i]);
    }
    s << indent << "y[]" << std::endl;
    for (size_t i = 0; i < v.y.size(); ++i)
    {
      s << indent << "  y[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.y[i]);
    }
    s << indent << "yaw[]" << std::endl;
    for (size_t i = 0; i < v.yaw.size(); ++i)
    {
      s << indent << "  yaw[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.yaw[i]);
    }
    s << indent << "sigx[]" << std::endl;
    for (size_t i = 0; i < v.sigx.size(); ++i)
    {
      s << indent << "  sigx[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.sigx[i]);
    }
    s << indent << "sigy[]" << std::endl;
    for (size_t i = 0; i < v.sigy.size(); ++i)
    {
      s << indent << "  sigy[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.sigy[i]);
    }
    s << indent << "rho[]" << std::endl;
    for (size_t i = 0; i < v.rho.size(); ++i)
    {
      s << indent << "  rho[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.rho[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // OBJECT_MSGS_MESSAGE_DEBUGPREDICTION_H
