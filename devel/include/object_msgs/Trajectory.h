// Generated by gencpp from file object_msgs/Trajectory.msg
// DO NOT EDIT!


#ifndef OBJECT_MSGS_MESSAGE_TRAJECTORY_H
#define OBJECT_MSGS_MESSAGE_TRAJECTORY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace object_msgs
{
template <class ContainerAllocator>
struct Trajectory_
{
  typedef Trajectory_<ContainerAllocator> Type;

  Trajectory_()
    : header()
    , n(0)
    , dt(0.0)
    , x()
    , y()
    , yaw()
    , kappa()
    , a()
    , v()
    , t0()  {
    }
  Trajectory_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , n(0)
    , dt(0.0)
    , x(_alloc)
    , y(_alloc)
    , yaw(_alloc)
    , kappa(_alloc)
    , a(_alloc)
    , v(_alloc)
    , t0()  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int32_t _n_type;
  _n_type n;

   typedef float _dt_type;
  _dt_type dt;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _x_type;
  _x_type x;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _y_type;
  _y_type y;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _yaw_type;
  _yaw_type yaw;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _kappa_type;
  _kappa_type kappa;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _a_type;
  _a_type a;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _v_type;
  _v_type v;

   typedef ros::Time _t0_type;
  _t0_type t0;





  typedef boost::shared_ptr< ::object_msgs::Trajectory_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::object_msgs::Trajectory_<ContainerAllocator> const> ConstPtr;

}; // struct Trajectory_

typedef ::object_msgs::Trajectory_<std::allocator<void> > Trajectory;

typedef boost::shared_ptr< ::object_msgs::Trajectory > TrajectoryPtr;
typedef boost::shared_ptr< ::object_msgs::Trajectory const> TrajectoryConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::object_msgs::Trajectory_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::object_msgs::Trajectory_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace object_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'object_msgs': ['/home/jdy/project_ws/src/custom_msgs/object_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::object_msgs::Trajectory_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::object_msgs::Trajectory_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::object_msgs::Trajectory_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::object_msgs::Trajectory_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::object_msgs::Trajectory_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::object_msgs::Trajectory_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::object_msgs::Trajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b804e4a65244f573ff8ce3aa030bf62b";
  }

  static const char* value(const ::object_msgs::Trajectory_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb804e4a65244f573ULL;
  static const uint64_t static_value2 = 0xff8ce3aa030bf62bULL;
};

template<class ContainerAllocator>
struct DataType< ::object_msgs::Trajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "object_msgs/Trajectory";
  }

  static const char* value(const ::object_msgs::Trajectory_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::object_msgs::Trajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n\
int32 n\n\
float32 dt\n\
float32[] x\n\
float32[] y\n\
float32[] yaw\n\
float32[] kappa\n\
float32[] a\n\
float32[] v\n\
time t0  # time corresponding x[0]\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::object_msgs::Trajectory_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::object_msgs::Trajectory_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.n);
      stream.next(m.dt);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.yaw);
      stream.next(m.kappa);
      stream.next(m.a);
      stream.next(m.v);
      stream.next(m.t0);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Trajectory_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::object_msgs::Trajectory_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::object_msgs::Trajectory_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "n: ";
    Printer<int32_t>::stream(s, indent + "  ", v.n);
    s << indent << "dt: ";
    Printer<float>::stream(s, indent + "  ", v.dt);
    s << indent << "x[]" << std::endl;
    for (size_t i = 0; i < v.x.size(); ++i)
    {
      s << indent << "  x[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.x[i]);
    }
    s << indent << "y[]" << std::endl;
    for (size_t i = 0; i < v.y.size(); ++i)
    {
      s << indent << "  y[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.y[i]);
    }
    s << indent << "yaw[]" << std::endl;
    for (size_t i = 0; i < v.yaw.size(); ++i)
    {
      s << indent << "  yaw[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.yaw[i]);
    }
    s << indent << "kappa[]" << std::endl;
    for (size_t i = 0; i < v.kappa.size(); ++i)
    {
      s << indent << "  kappa[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.kappa[i]);
    }
    s << indent << "a[]" << std::endl;
    for (size_t i = 0; i < v.a.size(); ++i)
    {
      s << indent << "  a[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.a[i]);
    }
    s << indent << "v[]" << std::endl;
    for (size_t i = 0; i < v.v.size(); ++i)
    {
      s << indent << "  v[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.v[i]);
    }
    s << indent << "t0: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.t0);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OBJECT_MSGS_MESSAGE_TRAJECTORY_H
