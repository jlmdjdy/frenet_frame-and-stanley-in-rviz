// Generated by gencpp from file object_msgs/Prediction.msg
// DO NOT EDIT!


#ifndef OBJECT_MSGS_MESSAGE_PREDICTION_H
#define OBJECT_MSGS_MESSAGE_PREDICTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <object_msgs/Object.h>

namespace object_msgs
{
template <class ContainerAllocator>
struct Prediction_
{
  typedef Prediction_<ContainerAllocator> Type;

  Prediction_()
    : header()
    , id(0)
    , n_predictions(0)
    , dt(0.0)
    , predictions()
    , sigx()
    , sigy()
    , rho()
    , t0()  {
    }
  Prediction_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , id(0)
    , n_predictions(0)
    , dt(0.0)
    , predictions(_alloc)
    , sigx(_alloc)
    , sigy(_alloc)
    , rho(_alloc)
    , t0()  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint32_t _id_type;
  _id_type id;

   typedef uint32_t _n_predictions_type;
  _n_predictions_type n_predictions;

   typedef float _dt_type;
  _dt_type dt;

   typedef std::vector< ::object_msgs::Object_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::object_msgs::Object_<ContainerAllocator> >::other >  _predictions_type;
  _predictions_type predictions;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _sigx_type;
  _sigx_type sigx;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _sigy_type;
  _sigy_type sigy;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _rho_type;
  _rho_type rho;

   typedef ros::Time _t0_type;
  _t0_type t0;





  typedef boost::shared_ptr< ::object_msgs::Prediction_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::object_msgs::Prediction_<ContainerAllocator> const> ConstPtr;

}; // struct Prediction_

typedef ::object_msgs::Prediction_<std::allocator<void> > Prediction;

typedef boost::shared_ptr< ::object_msgs::Prediction > PredictionPtr;
typedef boost::shared_ptr< ::object_msgs::Prediction const> PredictionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::object_msgs::Prediction_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::object_msgs::Prediction_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace object_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'object_msgs': ['/home/jdy/project_ws/src/custom_msgs/object_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::object_msgs::Prediction_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::object_msgs::Prediction_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::object_msgs::Prediction_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::object_msgs::Prediction_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::object_msgs::Prediction_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::object_msgs::Prediction_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::object_msgs::Prediction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "62eb5942cfcf183980a3aa9c64433045";
  }

  static const char* value(const ::object_msgs::Prediction_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x62eb5942cfcf1839ULL;
  static const uint64_t static_value2 = 0x80a3aa9c64433045ULL;
};

template<class ContainerAllocator>
struct DataType< ::object_msgs::Prediction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "object_msgs/Prediction";
  }

  static const char* value(const ::object_msgs::Prediction_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::object_msgs::Prediction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n\
uint32 id\n\
\n\
uint32 n_predictions\n\
float32 dt  # s\n\
object_msgs/Object[] predictions\n\
\n\
float32[] sigx\n\
float32[] sigy\n\
float32[] rho\n\
time t0  # time corresponding prediction[0]\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: object_msgs/Object\n\
std_msgs/Header header\n\
uint32 id\n\
\n\
# The type of classification given to this object.\n\
uint8 classification\n\
uint8 CLASSIFICATION_UNKNOWN=0\n\
uint8 CLASSIFICATION_CAR=1\n\
uint8 CLASSIFICATION_PEDESTRIAN=2\n\
uint8 CLASSIFICATION_CYCLIST=3\n\
\n\
# The detected position and orientation of the object.\n\
float32 x       # m\n\
float32 y       # m\n\
float32 yaw     # rad\n\
\n\
float32 v       # m/s\n\
float32 yawrate # rad/s\n\
\n\
float32 a      # m/ss\n\
float32 delta  # radian\n\
\n\
# size\n\
float32 L     # m\n\
float32 W     # m\n\
";
  }

  static const char* value(const ::object_msgs::Prediction_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::object_msgs::Prediction_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.id);
      stream.next(m.n_predictions);
      stream.next(m.dt);
      stream.next(m.predictions);
      stream.next(m.sigx);
      stream.next(m.sigy);
      stream.next(m.rho);
      stream.next(m.t0);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Prediction_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::object_msgs::Prediction_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::object_msgs::Prediction_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.id);
    s << indent << "n_predictions: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.n_predictions);
    s << indent << "dt: ";
    Printer<float>::stream(s, indent + "  ", v.dt);
    s << indent << "predictions[]" << std::endl;
    for (size_t i = 0; i < v.predictions.size(); ++i)
    {
      s << indent << "  predictions[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::object_msgs::Object_<ContainerAllocator> >::stream(s, indent + "    ", v.predictions[i]);
    }
    s << indent << "sigx[]" << std::endl;
    for (size_t i = 0; i < v.sigx.size(); ++i)
    {
      s << indent << "  sigx[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.sigx[i]);
    }
    s << indent << "sigy[]" << std::endl;
    for (size_t i = 0; i < v.sigy.size(); ++i)
    {
      s << indent << "  sigy[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.sigy[i]);
    }
    s << indent << "rho[]" << std::endl;
    for (size_t i = 0; i < v.rho.size(); ++i)
    {
      s << indent << "  rho[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.rho[i]);
    }
    s << indent << "t0: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.t0);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OBJECT_MSGS_MESSAGE_PREDICTION_H
